$(document).ready(function () {

    $('#menu').click(function () {
        $(this).toggleClass('fa-times');
        $('.navbar').toggleClass('nav-toggle');
    });

    $(window).on('scroll load', function () {
        $('#menu').removeClass('fa-times');
        $('.navbar').removeClass('nav-toggle');

        if (window.scrollY > 60) {
            document.querySelector('#scroll-top').classList.add('active');
        } else {
            document.querySelector('#scroll-top').classList.remove('active');
        }

        // scroll spy
        $('section').each(function () {
            let height = $(this).height();
            let offset = $(this).offset().top - 200;
            let top = $(window).scrollTop();
            let id = $(this).attr('id');

            if (top > offset && top < offset + height) {
                $('.navbar ul li a').removeClass('active');
                $('.navbar').find(`[href="#${id}"]`).addClass('active');
            }
        });
    });

    // smooth scrolling
    $('a[href*="#"]').on('click', function (e) {
        e.preventDefault();
        $('html, body').animate({
            scrollTop: $($(this).attr('href')).offset().top,
        }, 500, 'linear')
    });

emailjs.init({
    publicKey: 'mFFf6rVBltk8xYYab'
  });
  
  document.getElementById("contact-form").addEventListener("submit", function(event) {
      event.preventDefault();
  
      emailjs.sendForm('service_fte7loi', 'template_b8wk0g5', this)
          .then(function(response) {
              console.log('SUCCESS!', response.status, response.text);
              document.getElementById("contact-form").reset();
              alert("Form Submitted Successfully");
          }, function(error) {
              console.log('FAILED...', error);
              alert("Form Submission Failed! Try Again");
          });
  });
  
    // <!-- emailjs to mail contact form data -->

});

document.addEventListener('visibilitychange',
    function () {
        if (document.visibilityState === "visible") {
            document.title = "Portfolio | Ibrahim";
            $("#favicon").attr("href", "assets/images/favicon.png");
        }
        else {
            document.title = "Come Back To Portfolio";
            $("#favicon").attr("href", "assets/images/favhand.png");
        }
    });


// <!-- typed js effect starts -->
var typed = new Typed(".typing-text", {
    strings: [
  "Scalable AI & Data Systems","Applied Machine Learning Research","Distributed Intelligence & Real-Time Inference","ML, Deep Learning & Scientific Computing","Advance Data Pipelines Architecture"],
    loop: true,
    typeSpeed: 80,
    backSpeed: 25,
    backDelay: 100,
});
// <!-- typed js effect ends -->

// Dummy data: Replace this with your JSON or fetch call
const projects = [
  {
    name: "üß† R&D ‚Äì Multitask Learning for Low-Resource Arabic Dialects",
    desc: "This research-focused project explored multitask learning (MTL) techniques for handling various NLP tasks in Arabic dialects, including machine translation, sentiment classification, and diacritization. Implemented a shared-encoder transformer architecture with hierarchical heads and multi-objective optimization. Results showed strong gains over single-task baselines, including a 58% BLEU improvement and 16-point classification accuracy increase. The study contributed to underrepresented language modeling and was co-supervised by academic researchers.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/Arabic-Dialects-MTL"
  },
  {
    name: "ü§ñ Ai-vs-Human ‚Äì Detecting AI-Generated Text",
    desc: "This project investigates whether text was written by a human or AI using machine learning classifiers (Logistic Regression, MLP, XGBoost). It includes evaluation tools and prediction outputs for real-world use cases.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/PPE-Detection"
  },
  {
    name: "NLP_PROJECT ‚Äì AI Text Classification Web App",
    desc: "This project delivers a web-based interface that classifies whether a text was generated by a human or an AI. It uses an XGBoost model with TF-IDF features and is deployed using Flask for easy access and interaction.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/Darija-Translation"
  },
  {
    name: "üí≥ CreditCardSegmentation ‚Äì Client Segmentation with K-Means Clustering",
    desc: "This project segments credit card clients based on transaction behavior using K-Means clustering and PCA. It helps uncover behavioral groups for improved targeting and decision-making in finance and marketing.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/Cancer-Sentiment-NLP"
  },
  {
    name: "ELK-based Server Log Visualization",
    desc: "Created a pipeline using Elasticsearch, Logstash, Kibana, and PostgreSQL to analyze and visualize system logs in real time. Designed for anomaly detection and DevOps support.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/ELK-Log-Pipeline"
  },
  {
    name: "üß† ArabicaQA ‚Äì Arabic Question Answering with a Fine-Tuned Language Model",
    desc: "ArabicaQA is an interactive Arabic Question Answering app built using a fine-tuned causal language model and deployed with Gradio. Users can input any Arabic question, and the model returns a relevant answer in real time.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/Twitter-Sentiment"
  },
  {
    name: "AI-Based Academic Plagiarism Detection",
    desc: "Built a plagiarism detection system using TF-IDF, SVM, and Random Forest to detect non-obvious similarity across academic submissions. Included multilingual support and visual feedback.",
    image: "./assets/images/projects/data.png",
    codeLink: "https://github.com/STALPHA2708/AI-Plagiarism-Detector"
  }
];


function displayCardStack() {
  const container = document.querySelector('.card-stack');
  container.innerHTML = '';

  projects.forEach((project, index) => {
    const card = document.createElement('div');
    card.className = 'card';
    if (index === 0) card.classList.add('active');

    card.innerHTML = `
      <img src="${project.image}" alt="${project.name}">
      <h3>${project.name}</h3>
      <p>${project.desc}</p>
      <a href="${project.codeLink}" target="_blank" class="btn">View Code</a>
    `;

    card.addEventListener('click', () => {
  card.classList.remove('active');
  const next = card.nextElementSibling;

  if (next && next.classList.contains('card')) {
    next.classList.add('active');
  } else {
    // If no next card, restart from the first
    const first = document.querySelector('.card-stack .card:first-child');
    if (first) first.classList.add('active');
  }
});


    container.appendChild(card);
  });
}

document.addEventListener('DOMContentLoaded', displayCardStack);

  

document.onkeydown = function (e) {
    if (e.keyCode == 123) {
        return false;
    }
    if (e.ctrlKey && e.shiftKey && e.keyCode == 'I'.charCodeAt(0)) {
        return false;
    }
    if (e.ctrlKey && e.shiftKey && e.keyCode == 'C'.charCodeAt(0)) {
        return false;
    }
    if (e.ctrlKey && e.shiftKey && e.keyCode == 'J'.charCodeAt(0)) {
        return false;
    }
    if (e.ctrlKey && e.keyCode == 'U'.charCodeAt(0)) {
        return false;
    }
}

document.addEventListener('DOMContentLoaded', () => {
  const toggle = document.getElementById('theme-toggle');
  const icon = document.getElementById('theme-icon');
  const body = document.body;

  toggle.addEventListener('click', () => {
    body.classList.toggle('dark-mode');
    icon.textContent = body.classList.contains('dark-mode') ? '‚òÄÔ∏è' : 'üåô';
  });
});
